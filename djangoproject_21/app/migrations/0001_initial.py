# Generated by Django 4.1 on 2022-08-21 15:44

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="store",
            fields=[
                ("storeId", models.AutoField(primary_key=True, serialize=False)),
                ("storeName", models.CharField(max_length=30)),
                ("storeType", models.CharField(max_length=30)),
                ("storeLoca", models.CharField(max_length=30)),
                ("storeCap", models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name="goods",
            fields=[
                ("goodsId", models.AutoField(primary_key=True, serialize=False)),
                ("goodsType", models.CharField(max_length=30)),
                ("goodsName", models.CharField(max_length=30)),
                (
                    "goodsDate",
                    models.DateTimeField(
                        default=datetime.datetime(
                            2022,
                            8,
                            21,
                            15,
                            44,
                            43,
                            287545,
                            tzinfo=datetime.timezone.utc,
                        )
                    ),
                ),
                ("goodsAmount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("goodsShelves", models.CharField(max_length=30)),
                (
                    "goodsStore",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Store_goods",
                        to="app.store",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="user",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("userId", models.AutoField(primary_key=True, serialize=False)),
                ("useraccount", models.CharField(max_length=30, unique=True)),
                ("userSex", models.CharField(max_length=30)),
                ("usedName", models.CharField(max_length=30)),
                ("userage", models.CharField(max_length=30)),
                ("usertel", models.CharField(max_length=30)),
                ("useraddr", models.CharField(max_length=30)),
                ("userRole", models.CharField(max_length=30)),
                ("userDept", models.CharField(max_length=30)),
                ("userClass", models.CharField(max_length=30)),
                ("userPassword", models.CharField(max_length=30)),
                ("userNumber", models.CharField(max_length=30)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
                "swappable": "AUTH_USER_MODEL",
            },
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="shelves",
            fields=[
                (
                    "store_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        to="app.store",
                    ),
                ),
                ("shelvesId", models.AutoField(primary_key=True, serialize=False)),
                ("shelvesNum", models.CharField(max_length=30)),
                ("shelvesArea", models.CharField(max_length=30)),
                ("shelvesGoods", models.CharField(max_length=30)),
                ("shelvesDisinfect", models.CharField(max_length=30)),
                (
                    "shelvesStore",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Store_shelves",
                        to="app.store",
                    ),
                ),
            ],
            bases=("app.store",),
        ),
    ]
